<?xml version="1.0"?>
<APC_DDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://localhost/ddf_schema/apc_ddf_1_6.xsd"
         ddfid="mib2if" ddfname="MIB II" ddfversion="4">
	<schemaVersion>1.6</schemaVersion>

        <!-- Hack alert. Need to display MAC in UI, but ifaces are found in table.
             Can be multiple ifaces and multiple eth interfaces as well.
             Probe up to 10 table entries (if exist) and attempt to find an eth that's online.
             For now, if multiple eths match, last one wins.
        -->
            
        <device deviceid="setmacaddr1">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.1"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.1">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.1">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.1</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

        <device deviceid="setmacaddr2">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.2"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.2">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.2">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.2</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

        <device deviceid="setmacaddr3">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.3"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.3">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.3">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.3</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

        <device deviceid="setmacaddr4">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.4"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.4">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.4">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.4</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

        <device deviceid="setmacaddr5">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.5"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.5">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.5">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.5</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

        <device deviceid="setmacaddr6">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.6"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.6">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.6">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.6</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

        <device deviceid="setmacaddr7">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.7"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.7">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.7">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.7</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

        <device deviceid="setmacaddr8">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.8"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.8">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.8">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.8</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

        <device deviceid="setmacaddr9">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.9"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.9">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.9">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.9</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

        <device deviceid="setmacaddr10">
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
            <oidMustExist oid=".1.3.6.1.2.1.2.2.1.6.10"/>

            <!-- ifType -->
            <oidMustMatch ruleid="ifacetypecheck" oid=".1.3.6.1.2.1.2.2.1.3.10">
                <valueList>
                    <value>6</value> <!-- ethernetCsmacd - for all ethernet-like interfaces, regardless of speed, as per RFC3635 -->
                    <value>7</value> <!-- iso88023Csmacd - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>11</value> <!-- starLan - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>62</value> <!-- fastEther - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>69</value> <!-- fastEtherFX - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                    <value>117</value> <!-- gigabitEthernet - Deprecated via RFC3635 ethernetCsmacd (6) should be used instead-->
                </valueList>
            </oidMustMatch>

            <!-- ifOperStatus -->
            <oidMustMatch ruleid="ifaceupcheck" oid=".1.3.6.1.2.1.2.2.1.8.10">
                <valueList>
                    <value>1</value> <!-- up -->
                </valueList>
            </oidMustMatch>
            
            <!-- ifPhysAddress -->
            <setProductData ruleid="mac_addr" field="mac_addr">
                <regex>
                    <!-- Pattern match on valid MAC address chars. Add colons into mac address for display -->
                    <op>([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])([0-9a-fA-F][0-9a-fA-F])</op>
                    <op><getOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6.10</getOid></op> 
                    <op>%1$s:%2$s:%3$s:%4$s:%5$s:%6$s</op>
                </regex>
            </setProductData>
        </device>

	<device deviceid="mib2ifstate">
		<oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
		
		<userOption ruleid="mib2ifopt" default="false" optionid="crawl_interfaces">
			<name>Include network interface status</name>
		</userOption>
		<stateSensor ruleid="mib2-if-type-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>state</type>
			<sensorId>MIB2_IF_TYPE_<rowIndex/></sensorId>
			<value><mapValue mapid="mib2-if-to-index"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></value>
			<label>Interface Type -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<enum>mib2-if-list</enum>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</stateSensor>
		<stateSensor ruleid="mib2-if-admin-stat" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>state</type>
			<sensorId>MIB2_IF_ADMIN_<rowIndex/></sensorId>
			<value><mapValue mapid="mib2-admin-status-to-index"><getRowOid>.1.3.6.1.2.1.2.2.1.7</getRowOid></mapValue></value>
			<label>Admin Status -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<enum>mib2-admin-status</enum>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</stateSensor>
		
		<stateSensor ruleid="mib2-if-op-stat" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>state</type>
			<sensorId>MIB2_IF_OP_<rowIndex/></sensorId>
			<value><mapValue mapid="mib2-admin-status-to-index"><getRowOid>.1.3.6.1.2.1.2.2.1.8</getRowOid></mapValue></value>
			<label>Operating Status -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<enum>mib2-admin-status</enum>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</stateSensor>
		
		<stringSensor ruleid="mib2-if-macaddr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>string</type>
			<sensorId>MIB2_IF_MACADDR_<rowIndex/></sensorId>
			<value><getRowOid is-binary="yes">.1.3.6.1.2.1.2.2.1.6</getRowOid></value>
			<label>IF MAC Address -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</stringSensor>
		
		<!-- Map to use for rowTest for skipping uninteresting interface types -->
		<valueMap ruleid="mib2-if-to-skip">
			<!-- Loopback is uninteresting -->
			<valueIn>24</valueIn><valueOut>[false]</valueOut>
			<!-- Others are OK -->
			<valueIn>*</valueIn><valueOut>[true]</valueOut>
		</valueMap>
		<valueMap ruleid="mib2-if-to-index">
			<valueIn>1</valueIn><valueOut>0</valueOut>
			<valueIn>5</valueIn><valueOut>1</valueOut>
			<valueIn>6</valueIn><valueOut>2</valueOut>
			<valueIn>7</valueIn><valueOut>3</valueOut>
			<valueIn>15</valueIn><valueOut>4</valueOut>
			<valueIn>17</valueIn><valueOut>5</valueOut>
			<valueIn>20</valueIn><valueOut>6</valueOut>
			<valueIn>21</valueIn><valueOut>7</valueOut>
			<valueIn>22</valueIn><valueOut>8</valueOut>
			<valueIn>23</valueIn><valueOut>9</valueOut>
			<valueIn>24</valueIn><valueOut>10</valueOut>
			<valueIn>32</valueIn><valueOut>11</valueOut>
			<valueIn>37</valueIn><valueOut>12</valueOut>
			<valueIn>39</valueIn><valueOut>13</valueOut>
			<valueIn>56</valueIn><valueOut>14</valueOut>
			<valueIn>*</valueIn><valueOut>15</valueOut>
		</valueMap>
		<enumMap ruleid="mib2-if-list">
			<label>other</label>
			<label>x25</label>
			<label>ethernet-csmacd</label>
			<label>IEEE802.3</label>
			<label>FDDI</label>
			<label>sdlc</label>
			<label>basicISDN</label>
			<label>primaryISDN</label>
			<label>propPointToPointSerial</label>
			<label>ppp</label>
			<label>softwareLoopback</label>
			<label>frame-relay</label>
			<label>atm</label>
			<label>SONET</label>
			<label>fibre-channel</label>
			<label>unknown</label>
		</enumMap>
		<valueMap ruleid="mib2-admin-status-to-index">
			<valueIn>1</valueIn><valueOut>0</valueOut>
			<valueIn>2</valueIn><valueOut>1</valueOut>
			<valueIn>3</valueIn><valueOut>2</valueOut>
			<valueIn>4</valueIn><valueOut>3</valueOut>
			<valueIn>5</valueIn><valueOut>4</valueOut>
			<valueIn>6</valueIn><valueOut>5</valueOut>
			<valueIn>7</valueIn><valueOut>6</valueOut>
			<valueIn>*</valueIn><valueOut>3</valueOut>
		</valueMap>
		<enumMap ruleid="mib2-admin-status">
			<label>Up</label>
			<label>Down</label>
			<label>Testing</label>
			<label>Unknown</label>
			<label>Dormant</label>
			<label>Not Preset</label>
			<label>Lower Layer Down</label>
		</enumMap>
		
	</device>
	
	<device deviceid="mib2ifperf">
		<oidMustExist oid=".1.3.6.1.2.1.2.2.1.1" istree="yes"/>
		<userOption ruleid="mib2ifopt" default="false" optionid="mib2ifperf" prereq-optionid="crawl_interfaces">
			<name>Include network interface performance</name>
		</userOption>
		
		<numSensor ruleid="mib2-if-octetsin-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2if/mib2ifstate/mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>num/bytespersec</type>
			<sensorId>MIB2_IF_OCTETSIN_<rowIndex/></sensorId>
			<value israte="yes" counteroffset="4294967296"><getRowOid>.1.3.6.1.2.1.2.2.1.10</getRowOid></value>
			<label>Incoming Bytes -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</numSensor>

		<numSensor ruleid="mib2-if-pktsin-uni-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2if/mib2ifstate/mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>num/pktspersec/uni</type>
			<sensorId>MIB2_IF_PKTSIN_UNICAST_<rowIndex/></sensorId>
			<value israte="yes" counteroffset="4294967296"><getRowOid>.1.3.6.1.2.1.2.2.1.11</getRowOid></value>
			<label>Incoming Unicast Packets -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</numSensor>
		
		<numSensor ruleid="mib2-if-pktsin-nonuni-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2if/mib2ifstate/mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>num/pktspersec/nonuni</type>
			<sensorId>MIB2_IF_PKTSIN_NONUNICAST_<rowIndex/></sensorId>
			<value israte="yes" counteroffset="4294967296"><getRowOid>.1.3.6.1.2.1.2.2.1.12</getRowOid></value>
			<label>Incoming Non-unicast Packets -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</numSensor>
		
		<numSensor ruleid="mib2-if-pktsin-disc-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2if/mib2ifstate/mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>num/pktspersec/discard</type>
			<sensorId>MIB2_IF_PKTSIN_DISCARD_<rowIndex/></sensorId>
			<value israte="yes" counteroffset="4294967296"><getRowOid>.1.3.6.1.2.1.2.2.1.13</getRowOid></value>
			<label>Incoming Discards -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</numSensor>
		
		<numSensor ruleid="mib2-if-pktsin-err-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2if/mib2ifstate/mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>num/pktspersec/err</type>
			<sensorId>MIB2_IF_PKTSIN_ERROR_<rowIndex/></sensorId>
			<value israte="yes" counteroffset="4294967296"><getRowOid>.1.3.6.1.2.1.2.2.1.14</getRowOid></value>
			<label>Incoming Errors -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</numSensor>
		
		<numSensor ruleid="mib2-if-octetsout-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2if/mib2ifstate/mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>num/bytespersec</type>
			<sensorId>MIB2_IF_OCTETSOUT_<rowIndex/></sensorId>
			<value israte="yes" counteroffset="4294967296"><getRowOid>.1.3.6.1.2.1.2.2.1.16</getRowOid></value>
			<label>Outgoing Bytes -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</numSensor>
		
		<numSensor ruleid="mib2-if-pktsout-uni-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2if/mib2ifstate/mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>num/pktspersec/uni</type>
			<sensorId>MIB2_IF_PKTSOUT_UNICAST_<rowIndex/></sensorId>
			<value israte="yes" counteroffset="4294967296"><getRowOid>.1.3.6.1.2.1.2.2.1.17</getRowOid></value>
			<label>Outgoing Unicast Packets -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</numSensor>
		
		<numSensor ruleid="mib2-if-pktsout-nonuni-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2if/mib2ifstate/mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>num/pktspersec/nonuni</type>
			<sensorId>MIB2_IF_PKTSOUT_NONUNICAST_<rowIndex/></sensorId>
			<value israte="yes" counteroffset="4294967296"><getRowOid>.1.3.6.1.2.1.2.2.1.18</getRowOid></value>
			<label>Outgoing Non-unicast Packets -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</numSensor>
		
		<numSensor ruleid="mib2-if-pktsout-err-snr" index=".1.3.6.1.2.1.2.2.1.1">
			<rowTest><mapValue mapid="mib2if/mib2ifstate/mib2-if-to-skip"><getRowOid>.1.3.6.1.2.1.2.2.1.3</getRowOid></mapValue></rowTest>
			<type>num/pktspersec/err</type>
			<sensorId>MIB2_IF_PKTSOUT_ERROR_<rowIndex/></sensorId>
			<value israte="yes" counteroffset="4294967296"><getRowOid>.1.3.6.1.2.1.2.2.1.20</getRowOid></value>
			<label>Outgoing Errors -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></label>
			<sensorSet>Interface -<space/><getRowOid>.1.3.6.1.2.1.2.2.1.2</getRowOid></sensorSet>
		</numSensor>

	</device>

</APC_DDF>
